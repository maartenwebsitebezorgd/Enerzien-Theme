{"version":3,"file":"index.modern.js","sources":["../src/read-smore.js","../src/utils/index.js"],"sourcesContent":["import { getWordCount, getCharCount, trimSpaces } from \"./utils\";\n\n\n'use strict';\n\n/**\n * Defaults\n */\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 70,\n  charsCount: 150,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false,\n};\n\n/**\n * ReadSmore\n * @param {HTML element} element\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(element, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: [],\n  };\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    for (let i = 0, n = element.length; i < n; ++i) {\n      truncate(element[i], i);\n    }\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    // Trim starting/ending empty spaces\n    const trimedSpaces = trimSpaces(str);\n\n    if (isChars) {\n      return trimedSpaces.split('').slice(0, max).join('') + '...';\n    }\n\n    return trimedSpaces.split(/\\s+/).slice(0, max).join(' ') + '...';\n  }\n\n  /**\n   * Truncate Logic\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} i - current instance index\n   */\n  function truncate(el, idx) {\n    // User defined word count or defaults\n    const numberWords = el.dataset.readSmoreWords || options.wordsCount;\n    // User defined chars (if exists) or word count\n    const numberCount = el.dataset.readSmoreChars || numberWords;\n    const originalContent = el.innerHTML;\n    // Ellipser: content, count, is chars bool\n    const truncateContent = ellipse(\n      originalContent,\n      numberCount,\n      el.dataset.readSmoreChars ? true : false\n    );\n    const originalContentCount = el.dataset.readSmoreWords\n      ? getWordCount(originalContent)\n      : getCharCount(originalContent);\n\n    settings.originalContentArr.push(originalContent);\n    settings.truncatedContentArr.push(truncateContent);\n\n    if (numberCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx];\n      let self = idx;\n      createLink(self);\n    }\n  }\n\n  /**\n   * Create Link\n   * Creates and Inserts Read More Link\n   * @param {number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const linkWrap = document.createElement('span');\n\n    linkWrap.className = `${options.blockClassName}__link-wrap`;\n\n    linkWrap.innerHTML = `<a id=${options.blockClassName}_${idx}\n                             class=${options.blockClassName}__link\n                             style=\"cursor:pointer;\">\n                             ${options.moreText}\n                          </a>`;\n\n    // Inset created link\n    element[idx].after(linkWrap);\n\n    // Call link click handler\n    handleLinkClick(idx);\n  }\n\n  /**\n   * Link Click Listener\n   * @param {number} index - index of clicked link\n   */\n  function handleLinkClick(idx) {\n    const link = document.querySelector(`#${options.blockClassName}_${idx}`);\n\n    link.addEventListener('click', (e) => {\n      element[idx].classList.toggle('is-expanded');\n      const target = e.currentTarget;\n      if (target.dataset.clicked !== 'true') {\n        element[idx].innerHTML = settings.originalContentArr[idx];\n        target.innerHTML = options.lessText;\n        target.dataset.clicked = true;\n      } else {\n        element[idx].innerHTML = settings.truncatedContentArr[idx];\n        target.innerHTML = options.moreText;\n        target.dataset.clicked = false;\n      }\n    });\n  }\n\n  // API\n  return {\n    init: init,\n  };\n}\n\nReadSmore.options = defaultOptions;\n\nexport default ReadSmore;\n","'use strict';\n\n/**\n * Count Words\n * Helper to handle word count.\n * @param {string} str - Target content string.\n */\nexport function countWords(str) {\n  return str.split(/\\s+/).length;\n}\n\n/**\n * Count Chars\n * Helper to count by character\n * @param {string} str - Target content string.\n */\nexport function getCharCount(str) {\n  return str.length;\n}\n\nexport function getWordCount(str) {\n  return str.length;\n}\n\nexport function noTags(str) {\n  return str.replace(/(<([^>]+)>)/gi, '');\n}\n\nexport function noSpacing(str) {\n  return str.replace(/\\s/g, '');\n}\n\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '');\n}\n\nexport function getTagsCount(str) {\n  const tags = /(<([^>]+)>)/gi;\n  return ((str || '').match(tags) || []).length;\n}\n"],"names":["defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","ReadSmore","element","options","Object","assign","settings","originalContentArr","truncatedContentArr","truncate","el","idx","numberCount","dataset","readSmoreChars","readSmoreWords","originalContent","innerHTML","truncateContent","str","max","isChars","trimedSpaces","trimSpaces","replace","split","slice","join","ellipse","originalContentCount","length","push","linkWrap","document","createElement","className","after","querySelector","addEventListener","e","classList","toggle","target","currentTarget","clicked","handleLinkClick","createLink","init","i","n"],"mappings":"AAQA,MAAMA,EAAiB,CACrBC,eAAgB,aAChBC,WAAY,GACZC,WAAY,IACZC,SAAU,YACVC,SAAU,YACVC,UAAU,GASZ,SAASC,EAAUC,EAASC,GAC1BA,EAAUC,OAAOC,OAAO,GAAIX,EAAgBS,GAG5C,IAAIG,EAAW,CACbC,mBAAoB,GACpBC,oBAAqB,IAqCvB,SAASC,EAASC,EAAIC,GAEpB,MAEMC,EAAcF,EAAGG,QAAQC,gBAFXJ,EAAGG,QAAQE,gBAAkBZ,EAAQP,WAGnDoB,EAAkBN,EAAGO,UAErBC,EAvBR,SAAiBC,EAAKC,EAAKC,GAAU,GAEnC,MAAMC,ECpBMC,SAAWJ,GACzB,OAAOA,EAAIK,QAAQ,kBAAmB,IDmBfD,CAAWJ,GAEhC,OAAIE,EACKC,EAAaG,MAAM,IAAIC,MAAM,EAAGN,GAAKO,KAAK,IAAM,MAGlDL,EAAaG,MAAM,OAAOC,MAAM,EAAGN,GAAKO,KAAK,KAAO,MAenCC,CACtBZ,EACAJ,IACAF,EAAGG,QAAQC,gBAEPe,EACWb,EC1DRc,OD6DTxB,EAASC,mBAAmBwB,KAAKf,GACjCV,EAASE,oBAAoBuB,KAAKb,GAE9BN,EAAciB,IAChBnB,EAAGO,UAAYX,EAASE,oBAAoBG,GAWhD,SAAoBA,GAClB,MAAMqB,EAAWC,SAASC,cAAc,QAExCF,EAASG,UAAa,GAAEhC,EAAQR,4BAEhCqC,EAASf,UAAa,SAAQd,EAAQR,kBAAkBgB,yCACvBR,EAAQR,6GAEdQ,EAAQL,2CAInCI,EAAQS,GAAKyB,MAAMJ,GAUrB,SAAyBrB,GACVsB,SAASI,cAAe,IAAGlC,EAAQR,kBAAkBgB,KAE7D2B,iBAAiB,QAAUC,IAC9BrC,EAAQS,GAAK6B,UAAUC,OAAO,eAC9B,MAAMC,EAASH,EAAEI,cACc,SAA3BD,EAAO7B,QAAQ+B,SACjB1C,EAAQS,GAAKM,UAAYX,EAASC,mBAAmBI,GACrD+B,EAAOzB,UAAYd,EAAQJ,SAC3B2C,EAAO7B,QAAQ+B,SAAU,IAEzB1C,EAAQS,GAAKM,UAAYX,EAASE,oBAAoBG,GACtD+B,EAAOzB,UAAYd,EAAQL,SAC3B4C,EAAO7B,QAAQ+B,SAAU,KApB7BC,CAAgBlC,GAxBdmC,CADWnC,IAmDf,MAAO,CACLoC,KAtGF,WACE,IAAK,IAAIC,EAAI,EAAGC,EAAI/C,EAAQ4B,OAAQkB,EAAIC,IAAKD,EAC3CvC,EAASP,EAAQ8C,GAAIA,KAwG3B/C,EAAUE,QAAUT"}